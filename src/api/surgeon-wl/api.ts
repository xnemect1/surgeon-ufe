/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Surgeons List for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tomas.nemec1999@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SurgeriesListEntry
 */
export interface SurgeriesListEntry {
    /**
     * Unique id of the entry in this surgeries list
     * @type {string}
     * @memberof SurgeriesListEntry
     */
    'id': string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof SurgeriesListEntry
     */
    'patientId'?: string;
    /**
     * 
     * @type {SurgeryDetail}
     * @memberof SurgeriesListEntry
     */
    'surgeryDetail': SurgeryDetail;
}
/**
 * Detail about surgery
 * @export
 * @interface SurgeryDetail
 */
export interface SurgeryDetail {
    /**
     * 
     * @type {string}
     * @memberof SurgeryDetail
     */
    'date': string;
    /**
     * 
     * @type {boolean}
     * @memberof SurgeryDetail
     */
    'successful': boolean;
    /**
     * 
     * @type {string}
     * @memberof SurgeryDetail
     */
    'operatedLimb': SurgeryDetailOperatedLimbEnum;
    /**
     * 
     * @type {string}
     * @memberof SurgeryDetail
     */
    'surgeryNote': string;
}

export const SurgeryDetailOperatedLimbEnum = {
    LeftHand: 'left hand',
    RightHand: 'right hand',
    LeftLeg: 'left leg',
    RightLeg: 'right leg',
    Head: 'head',
    Body: 'body'
} as const;

export type SurgeryDetailOperatedLimbEnum = typeof SurgeryDetailOperatedLimbEnum[keyof typeof SurgeryDetailOperatedLimbEnum];


/**
 * SurgeriesListApi - axios parameter creator
 * @export
 */
export const SurgeriesListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By using surgeonId you get list of surgeries performed by surgeon
         * @summary Provides surgeries of surgeon
         * @param {string} surgeonId pass the id of the particular surgeon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurgeonSurgeries: async (surgeonId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surgeonId' is not null or undefined
            assertParamExists('getSurgeonSurgeries', 'surgeonId', surgeonId)
            const localVarPath = `/surgeries-list/{surgeonId}/entries`
                .replace(`{${"surgeonId"}}`, encodeURIComponent(String(surgeonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurgeriesListApi - functional programming interface
 * @export
 */
export const SurgeriesListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurgeriesListApiAxiosParamCreator(configuration)
    return {
        /**
         * By using surgeonId you get list of surgeries performed by surgeon
         * @summary Provides surgeries of surgeon
         * @param {string} surgeonId pass the id of the particular surgeon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurgeonSurgeries(surgeonId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SurgeriesListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurgeonSurgeries(surgeonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurgeriesListApi - factory interface
 * @export
 */
export const SurgeriesListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurgeriesListApiFp(configuration)
    return {
        /**
         * By using surgeonId you get list of surgeries performed by surgeon
         * @summary Provides surgeries of surgeon
         * @param {string} surgeonId pass the id of the particular surgeon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurgeonSurgeries(surgeonId: string, options?: any): AxiosPromise<Array<SurgeriesListEntry>> {
            return localVarFp.getSurgeonSurgeries(surgeonId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SurgeriesListApi - interface
 * @export
 * @interface SurgeriesListApi
 */
export interface SurgeriesListApiInterface {
    /**
     * By using surgeonId you get list of surgeries performed by surgeon
     * @summary Provides surgeries of surgeon
     * @param {string} surgeonId pass the id of the particular surgeon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurgeriesListApiInterface
     */
    getSurgeonSurgeries(surgeonId: string, options?: AxiosRequestConfig): AxiosPromise<Array<SurgeriesListEntry>>;

}

/**
 * SurgeriesListApi - object-oriented interface
 * @export
 * @class SurgeriesListApi
 * @extends {BaseAPI}
 */
export class SurgeriesListApi extends BaseAPI implements SurgeriesListApiInterface {
    /**
     * By using surgeonId you get list of surgeries performed by surgeon
     * @summary Provides surgeries of surgeon
     * @param {string} surgeonId pass the id of the particular surgeon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurgeriesListApi
     */
    public getSurgeonSurgeries(surgeonId: string, options?: AxiosRequestConfig) {
        return SurgeriesListApiFp(this.configuration).getSurgeonSurgeries(surgeonId, options).then((request) => request(this.axios, this.basePath));
    }
}


